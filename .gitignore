# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log
hosts_test

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Ignore sensitive data files
vault_password_file
*.vault
*.secret

# Ignore temporary files
*.swp
*.swo
*.tmp

# Ignore log files
*.log
*.out

# Ignore compiled Python files
__pycache__/
*.py[cod]

# Ignore Ansible retry files
*.retry

# Ignore roles and collections if not part of the repo
roles/
collections/

# Ignore inventory files if they contain sensitive data
inventory/

# Ignore environment-specific variable files
group_vars/*.yml
host_vars/*.yml

# Ignore SSH key files
*.pem
*.key

# Ignore virtual environment directory
venv/
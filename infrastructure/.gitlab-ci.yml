stages:
  - tf_apply
  - get_variables
  - ansible_docker_install
  - copy_compose_file_to_remote
  - tf_destroy

variables:
  TF_VAR_AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
  TF_VAR_AWS_SECRET_KEY: ${AWS_SECRET_KEY}
  TF_STATE: "terraform/terraform.tfstate"

terraform_apply:
  stage: tf_apply
  tags:
    - test_job
    - wordpress
  script:
    - cd ./terraform
    - terraform init
    - terraform apply -auto-approve
  artifacts:
    paths:
      - ansible/hosts
      - ${TF_STATE}

create-variable:
  stage: get_variables
  tags:
    - test_job
    - wordpress
  script:
    - cd ./ansible
    - IP_ADDRESS=$(cat hosts)
    - echo "IP_ADDRESS=${IP_ADDRESS}" >> ip_address.env
  artifacts:
    paths:
      - ip_address.env
  dependencies: 
    - terraform_apply


ansible_docker_install:
  stage: ansible_docker_install
  tags:
    - test_job
    - wordpress
  script:
    - cd ./ansible
    - ansible-playbook install_docker.yml
  allow_failure: true
  dependencies: 
    - terraform_apply

# copy_compose_file_to_remote:
#   stage: copy_compose_file_to_remote
#   tags:
#     - test_job
#     - wordpress
#   script:
#     - cd ./ansible
#     - ansible-playbook -i inventory playbook.yml -e ci_dir=$CI_DIR
#   variables:
#     CI_DIR: ${CI_PROJECT_DIR}

terraform_destroy:
  stage: tf_destroy
  tags:
    - test_job
    - wordpress
  script:
    - cd ./terraform
    - terraform init
    - terraform show
    - terraform destroy -auto-approve
  when: manual
  dependencies: 
    - terraform_apply
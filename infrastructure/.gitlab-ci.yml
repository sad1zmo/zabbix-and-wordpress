stages:
  - tf_apply
  - ansible_docker_install
  - copy_compose_file_to_remote
  - tf_destroy

cache:
  paths:
    - ${CI_PROJECT_DIR}/ansible/hosts


variables:
  TF_VAR_AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
  TF_VAR_AWS_SECRET_KEY: ${AWS_SECRET_KEY}
  TF_STATE: "terraform/terraform.tfstate"

terraform_apply:
  stage: tf_apply
  tags:
    - test_job
    - wordpress
  script:
    - cd ./terraform
    - terraform init
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /stage/i'
  # artifacts:
  #   paths:
  #     - ansible/hosts
  #     - ${TF_STATE}

ansible_docker_install:
  stage: ansible_docker_install
  tags:
    - test_job
    - wordpress
  script:
    - cd ./ansible
    - ansible-playbook install_docker.yml
  allow_failure: true
  needs:
    - job: terraform_apply
      # artifacts: true
# copy_compose_file_to_remote:
#   stage: copy_compose_file_to_remote
#   tags:
#     - test_job
#     - wordpress
#   script:
#     - cd ./ansible
#     - ansible-playbook -i inventory playbook.yml -e ci_dir=$CI_DIR
#   variables:
#     CI_DIR: ${CI_PROJECT_DIR}

terraform_destroy:
  stage: tf_destroy
  tags:
    - test_job
    - wordpress
  script:
    - cd ./terraform
    - terraform init
    - terraform show
    - terraform destroy -auto-approve
  when: manual
  needs:
    - job: terraform_apply
      # artifacts: true